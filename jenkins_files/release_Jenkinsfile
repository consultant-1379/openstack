pipeline {
  agent {
    node {
      label 'stratus_slave'
    }
  }
  // The options directive is for configuration that applies to the whole job.
  options {
    buildDiscarder(logRotator(numToKeepStr:'20'))
    timeout(time: 40, unit: 'MINUTES')
    timestamps()
  }
  stages {
    stage('Clean') {
      steps {
        sh '''
        # Kill any running containers
        running=$(docker ps -a -q| wc -l)
        if [ "$running" -gt "0" ];then
        echo "Killing containers"
        docker rm -f $(docker ps -a -q)
        fi
        '''
      }
    }
    stage('Image Version') {
      steps {
        script {
          env.IMAGE_VERSION = sh (
            script: "mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//g'",
            returnStdout: true
          ).trim()
          currentBuild.displayName = "#${env.BUILD_NUMBER} - ERICopenstackdeploy_CXP9033218 - ${env.IMAGE_VERSION}"
        }
      }
    }
    stage('Prepare release') {
      steps {
        sh '''
        git config user.name ENM_Jenkins
        git config user.email enmadm100@lmera.ericsson.se
        '''
        sh 'mvn release:prepare release:perform -Dmaven.test.skip=true -Darguments="-Dcode_style_branch_compare=remotes/gcm/master" -Dgoals="site:site -Psite_versioned site:deploy deploy" -DpreparationGoals="clean install -U" -DlocalCheckout="true" -Dmaven.test.skip=true'
      }
    }
    stage('Publish Documentation') {
      steps {
        sh 'mvn site:site'
        sh 'mvn -Psite_latest site:deploy'
      }
    }
    stage('Image: Build & Publish') {
      steps {
        script {
          def image_name = 'armdocker.seli.gic.ericsson.se/proj_nwci/enmdeployer:latest'
          // Build
          def image_build = docker.build("${image_name}", "--build-arg VERSION=${env.IMAGE_VERSION} -f ${env.WORKSPACE}/docker/Dockerfile ${env.WORKSPACE}")
          image_build.tag("${env.IMAGE_VERSION}")
          // Publish
          image_build.push("${env.IMAGE_VERSION}")
          image_build.push('latest')
        }
      }
    }
    stage('Clean up') {
      steps {
        sh """
        docker rmi armdocker.seli.gic.ericsson.se/proj_nwci/enmdeployer:${env.IMAGE_VERSION}
        docker rmi armdocker.seli.gic.ericsson.se/proj_nwci/enmdeployer:latest
        """
      }
    }
  }
  // The post build actions
  post {
    success {
      echo 'Pipeline Successfully Completed'
    }
    failure {
      emailext(attachLog: true,
               attachmentsPattern: 'currentBuild.rawBuild.log',
               from: 'enmadm100@lmera.ericsson.se',
               to: "${env.GERRIT_EVENT_ACCOUNT_EMAIL}",
               subject: "Failed: Jenkins Job ${env.JOB_NAME}",
               body: "Job: ${env.JOB_NAME}\nBuild Number: ${env.BUILD_NUMBER}\nThe Job build URL: ${env.BUILD_URL}")
    }
  }
}
